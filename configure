#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

export PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:$PATH"

# ---------------- VARIABLES ----------------
VER="v0.1"
REPO_URL="https://github.com/ghost11411/scout"
INSTALL_DIR="${HOME}/scout"
FORCE=false
UPDATE=false
UNINSTALL=false
TYPE="default"
LOG_FILE="/tmp/scout_temp_configure.log"
: > "$LOG_FILE"

TOOLS_DIR="${INSTALL_DIR}/tools"
BIN_DIR="${TOOLS_DIR}/bin"
WORDLISTS_DIR="${TOOLS_DIR}/wordlists"
GF_DIR="$WORDLISTS_DIR/GF-Patterns"

APT_PACKAGES=(
    git whois jq unzip python3 python3-pip python3-requests python3-dnspython parallel gcc curl wget zip cewl python3-shodan make ca-certificates libpcap-dev golang-go
)

GO_TOOLS=(
    "mapcidr|github.com/projectdiscovery/mapcidr/cmd/mapcidr@latest"
    "amass|github.com/owasp-amass/amass/v4/...@master"
    "assetfinder|github.com/tomnomnom/assetfinder@latest"
    "subfinder|github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest"
    "waybackurls|github.com/tomnomnom/waybackurls@latest"
    "gau|github.com/lc/gau/v2/cmd/gau@latest"
    "dnsx|github.com/projectdiscovery/dnsx/cmd/dnsx@latest"
    "gf|github.com/tomnomnom/gf@latest"
    "unfurl|github.com/tomnomnom/unfurl@latest"
    "httprobe|github.com/tomnomnom/httprobe@latest"
    "httpx|github.com/projectdiscovery/httpx/cmd/httpx@latest"
    "ffuf|github.com/ffuf/ffuf/v2@latest"
    "nuclei|github.com/projectdiscovery/nuclei/v3/cmd/nuclei@latest"
    "naabu|github.com/projectdiscovery/naabu/v2/cmd/naabu@latest"
    "notify|github.com/projectdiscovery/notify/cmd/notify@latest"
)

# ---------------- COLORS ----------------
BLUE="\e[94m"; GREEN="\e[92m"; YELLOW="\e[93m"; RED="\e[91m"; RESET="\e[0m"; BOLD="\e[1m"; CYAN="\033[0;36m"; HIGH_GREEN="\e[38;5;82m"

# ---------------- LOGGING ----------------
OK()      { printf "\r${GREEN}âœ… %s${RESET}\n" "$1"; }
INFO()    { printf "${BLUE}[*] %s${RESET}\n" "$1"; }
WARN()    { printf "${YELLOW}[!] %s${RESET}\n" "$1"; }
ERR()     { printf "${RED}[âœ˜] %s${RESET}\n" "$1" | tee -a "$LOG_FILE" >&2; }

RUN_CMD() {
    local DESC="$1"; shift
    if "$@" >>"$LOG_FILE" 2>&1; then
        OK "$DESC"
    else
        ERR "$DESC failed. Check $LOG_FILE"
    fi
}

# ---------------- CTRL+C HANDLER ----------------
trap 'echo -e "\n${RED}[âœ˜] Installation interrupted by user.${RESET}"; exit 1' INT

# ---------------- START TIMER ----------------
START_TIME=$(date +%s)

# ---------------- ASCII BANNER ----------------
BANNER(){
  ASCII_SCOUT=$(cat <<'EOF'
    /$$$$$$   /$$$$$$   /$$$$$$  /$$   /$$ /$$$$$$$$
   /$$__  $$ /$$__  $$ /$$__  $$| $$  | $$|__  $$__/
  | $$  \__/| $$  \__/| $$  | $$| $$  | $$   | $$   
  |  $$$$$$ | $$      | $$  | $$| $$  | $$   | $$   
   \____  $$| $$      | $$  | $$| $$  | $$   | $$   
   /$$  \ $$| $$    $$| $$  | $$| $$  | $$   | $$   
  |  $$$$$$/|  $$$$$$/|  $$$$$$/|  $$$$$$/   | $$   
   \______/  \______/  \______/  \______/    |__/   
EOF
  )
  TAGLINE="Recon Made Easy                  Made By Ghost ${VER}"
  echo -e "${BOLD}${GREEN}=====================================================${RESET}"
  
  # Animate ASCII letters line by line
  while IFS= read -r LINE; do
    for ((i=0;i<${#LINE};i++)); do
      printf "${HIGH_GREEN}${BOLD}%c${RESET}" "${LINE:i:1}"
      sleep 0.0005
    done
    printf "\n"
  done <<< "$ASCII_SCOUT"

  # Animate tagline
  for ((i=0;i<${#TAGLINE};i++)); do
    printf "${CYAN}${BOLD}%c${RESET}" "${TAGLINE:i:1}"
    sleep 0.001
  done
  printf "\n\n"
  echo -e "${BOLD}${GREEN}=====================================================${RESET}"
}

# ---------------- PARSE FLAGS ----------------
for ARG in "$@"; do
    case "$ARG" in
        --force) FORCE=true ;;
        --update) UPDATE=true ;;
        --uninstall) UNINSTALL=true ;;
        --help|-h)
            cat <<EOF
Usage: configure [--force] [--update] [--uninstall]
Actions:
    --force     Remove existing installation and fresh install
    --update    Update existing git installation
    --uninstall Remove installation and symlink
EOF
            exit 0 ;;
        *)
            ERR "Unknown option: $ARG"
            echo "Usage: configure [--force|--update|--uninstall]"
            exit 1 ;;
    esac
done

# ---------------- FLAG VALIDATION ----------------
FLAG_COUNT=0
$FORCE && FLAG_COUNT=$((FLAG_COUNT+1))
$UPDATE && FLAG_COUNT=$((FLAG_COUNT+1))
$UNINSTALL && FLAG_COUNT=$((FLAG_COUNT+1))
if [ "$FLAG_COUNT" -gt 1 ]; then
    WARN "Multiple flags used. Only one should be used."
    exit 1
fi

# ---------------- START ----------------
BANNER

# ---------------- CHECK ROOT ----------------
if [ "$EUID" -ne 0 ]; then
    ERR "Please run as root (sudo ./configure)"
    exit 1
fi

# ---------------- MODE SUMMARY ----------------
echo -e "${BOLD}${CYAN}MODE SUMMARY:"
echo "â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€"
echo "FORCE: $FORCE"
echo "UPDATE: $UPDATE"
echo "UNINSTALL: $UNINSTALL"
echo "Running as user: $(whoami)"
echo -e "â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€${RESET}"

# ---------------- NO FLAGS DEFAULT INSTALL ----------------
if [ "$FORCE" = false ] && [ "$UPDATE" = false ] && [ "$UNINSTALL" = false ]; then
    WARN "No flags provided. Proceeding with default installation."
    if [ -d "$INSTALL_DIR" ]; then
        ERR "$INSTALL_DIR already exists. Use --force to reinstall or --update to update."
        WARN "Check $LOG_FILE for details."
        exit 1
    else
        INFO "Cloning repository..."
        git clone "$REPO_URL" "$INSTALL_DIR" >>"$LOG_FILE" 2>&1 && OK "Repository cloned to $INSTALL_DIR"
    fi
fi

# ---------------- UNINSTALL ----------------
if [ "$UNINSTALL" = true ]; then
    INFO "Running Uninstaller..."
    [ -d "$INSTALL_DIR" ] && RUN_CMD "Remove install dir" rm -rf -- "$INSTALL_DIR"
    [ -L /usr/local/bin/scout ] && RUN_CMD "Remove symlink" rm -f -- /usr/local/bin/scout
    OK "Scout uninstalled."
    exit 0
fi

# ---------------- FORCE / UPDATE ----------------
if [ "$FORCE" = true ]; then
    WARN "--force flag detected"
    RUN_CMD "Remove existing install from $INSTALL_DIR" rm -rf -- "$INSTALL_DIR"
    INFO "Cloning repository..."
    git clone "$REPO_URL" "$INSTALL_DIR" >>"$LOG_FILE" 2>&1 && OK "Repository cloned to $INSTALL_DIR"
elif [ "$UPDATE" = true ]; then
    WARN "--update flag detected"
    if [ -d "$INSTALL_DIR/.git" ]; then
        cd "$INSTALL_DIR"
        git reset --hard >>"$LOG_FILE" 2>&1
        git pull --rebase --autostash >>"$LOG_FILE" 2>&1
        OK "Repository updated at $INSTALL_DIR"
    else
        WARN "$INSTALL_DIR is not a git repo. Cannot update."
    fi
fi

# ---------------- PREPARE DIRECTORIES ----------------
mkdir -p "$TOOLS_DIR" "$BIN_DIR" "$WORDLISTS_DIR"
find "$INSTALL_DIR" -type f -exec chmod +x {} \; || true

# ---------------- INSTALL APT PACKAGES ----------------
INFO "Updating APT repositories..."
apt-get update -y -qq >>"$LOG_FILE" 2>&1
OK "APT repositories updated"

INFO "Installing APT packages..."
apt-get install -y -qq --no-install-recommends "${APT_PACKAGES[@]}" >>"$LOG_FILE" 2>&1
OK "APT packages installed"

# ---------------- INSTALL GO TOOLS ----------------
if command -v go >/dev/null 2>&1; then
    INFO "Go version: $(go version | cut -d " " -f 3)"
    mkdir -p "$BIN_DIR"
    export GOBIN="$BIN_DIR"
    export PATH="$GOBIN:$PATH"
    for PAIR in "${GO_TOOLS[@]}"; do
        NAME="${PAIR%%|*}"
        PKG="${PAIR#*|}"
        INFO "Installing Go tool: $NAME..."
        go install "$PKG" >>"$LOG_FILE" 2>&1 && OK "Installed $NAME"
    done
fi

# ---------------- CLONE REPOS ----------------
for ENTRY in "GF-Patterns|$WORDLISTS_DIR/GF-Patterns|https://github.com/1ndianl33t/GF-Patterns.git" \
             "Sublist3r|$BIN_DIR/Sublist3r|https://github.com/aboul3la/Sublist3r.git"; do
    IFS='|' read -r NAME PATH GITURL <<< "$ENTRY"
    if [ -d "$PATH/.git" ]; then
        INFO "Updating $NAME..."
        git -C "$PATH" pull --ff-only >>"$LOG_FILE" 2>&1 && OK "$NAME updated"
    elif [ -d "$PATH" ]; then
        WARN "$PATH exists but is not a git repo. Skipping $NAME"
    else
        INFO "Cloning $NAME..."
        git clone --depth 1 "$GITURL" "$PATH" >>"$LOG_FILE" 2>&1 && OK "$NAME cloned"
    fi
done

# ---------------- SYMLINK ----------------
/bin/chmod 755 "$BIN_DIR"/* 2>/dev/null || true
[ -f "$INSTALL_DIR/scout" ] && /bin/chmod +x "$INSTALL_DIR/scout" || true
/bin/ln -sf "$INSTALL_DIR/scout" /usr/local/bin/scout
OK "Symlink created"

# ---------------- SHOW TOTAL TIME ----------------
END_TIME=$(/usr/bin/date +%s)
ELAPSED=$((END_TIME - START_TIME))
INFO "Script completed in $(printf '%02d:%02d:%02d' $((ELAPSED/3600)) $(((ELAPSED/60)%60)) $((ELAPSED%60)))"

# ---------------- SUMMARY ----------------
OK "Scout installation completed successfully!"
echo -e "Type ${BOLD}${CYAN}scout${RESET} to get started."
echo -e "For help, type ${BOLD}${CYAN}scout --help${RESET} or visit the GitHub repository: ${BOLD}${CYAN}${REPO_URL}${RESET}"
echo -e "${CYAN}${BOLD}Happy Recon!${RESET} ðŸ”Ž"
exit 0