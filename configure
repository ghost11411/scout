#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

# ---------------- Ensure PATH ----------------
export PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:$PATH"

# ---------------- Bootstrap essential utilities ----------------
REQUIRED_CMDS=(sleep chmod ln rm git curl wget unzip tar bash)

MISSING_CMDS=()
for CMD in "${REQUIRED_CMDS[@]}"; do
    if ! command -v "$CMD" >/dev/null 2>&1; then
        MISSING_CMDS+=("$CMD")
    fi
done

if [ ${#MISSING_CMDS[@]} -ne 0 ]; then
    echo "[*] Missing essential commands: ${MISSING_CMDS[*]}"
    echo "[*] Installing missing utilities..."
    if command -v apt >/dev/null 2>&1; then
        sudo apt update -y
        sudo apt install -y coreutils util-linux findutils git curl wget unzip tar bash
    elif command -v apk >/dev/null 2>&1; then
        sudo apk add --no-cache coreutils util-linux findutils bash git curl wget unzip tar
    elif command -v yum >/dev/null 2>&1; then
        sudo yum install -y coreutils util-linux findutils git curl wget unzip tar bash
    else
        echo "[âœ˜] Unsupported package manager. Install manually: ${MISSING_CMDS[*]}"
        exit 1
    fi
    echo "[âœ”] Essential utilities installed"
fi

# Verify that PATH now contains the commands
for CMD in "${REQUIRED_CMDS[@]}"; do
    if ! command -v "$CMD" >/dev/null 2>&1; then
        echo "[âœ˜] Command still not found after install: $CMD"
        exit 1
    fi
done

# ---------------- Colors ----------------
BLUE="\e[94m"; GREEN="\e[92m"; YELLOW="\e[93m"; RED="\e[91m"; RESET="\e[0m"; BOLD="\e[1m"; CYAN="\033[0;36m"; HIGH_GREEN="\e[38;5;82m";
VER=v0.2

# ---------------- Variables ----------------
REPO_URL="https://github.com/ghost11411/scout"
INSTALL_DIR="/root/scout"
FORCE=false
UPDATE=false
LOG_FILE="/tmp/scout_configure.log"
touch "$LOG_FILE"
: > "$LOG_FILE"

# ---------------- ASCII BANNER ----------------
BANNER(){
  ASCII_SCOUT=$(cat <<'EOF'
    /$$$$$$   /$$$$$$   /$$$$$$  /$$   /$$ /$$$$$$$$
   /$$__  $$ /$$__  $$ /$$__  $$| $$  | $$|__  $$__/
  | $$  \__/| $$  \__/| $$  \ $$| $$  | $$   | $$   
  |  $$$$$$ | $$      | $$  | $$| $$  | $$   | $$   
   \____  $$| $$      | $$  | $$| $$  | $$   | $$   
   /$$  \ $$| $$    $$| $$  | $$| $$  | $$   | $$   
  |  $$$$$$/|  $$$$$$/|  $$$$$$/|  $$$$$$/   | $$   
   \______/  \______/  \______/  \______/    |__/   
EOF
  )
  local tag="${VER:-v?}"
  TAGLINE="Recon Made Easy                  Made By Ghost ${tag}"

  echo -e "${BOLD}${GREEN}=====================================================${RESET}"
  while IFS= read -r LINE; do
    for ((i=0;i<${#LINE};i++)); do
      printf "${HIGH_GREEN}${BOLD}%c${RESET}" "${LINE:i:1}"
      sleep 0.0008
    done
    printf "\n"
  done <<< "$ASCII_SCOUT"

  for ((i=0;i<${#TAGLINE};i++)); do
    printf "${CYAN}${BOLD}%c${RESET}" "${TAGLINE:i:1}"
    sleep 0.002
  done
  printf "\n\n"
  echo -e "${BOLD}${GREEN}=====================================================${RESET}"
}

# ---------------- Messages ----------------
OK()      { printf "${GREEN}[âœ”] %s${RESET}\n" "$1"; }
INFO()    { printf "${BLUE}[*] %s${RESET}\n" "$1"; }
WARN()    { printf "${YELLOW}[!] %s${RESET}\n" "$1"; }
ERR()     { printf "${RED}[âœ˜] %s${RESET}\n" "$1" >> "$LOG_FILE"; }

# ---------------- Parse Arguments ----------------
for arg in "$@"; do
    case "$arg" in
        --force) FORCE=true ;;
        --update) UPDATE=true ;;
        *)
            ERR "Unknown option: $arg"
            echo "Usage: configure [--force | --update]"
            exit 1
            ;;
    esac
done

START_EPOCH=$(date +%s)

# ---------------- Start Installation ----------------
BANNER
INFO "Starting Scout installation..."

# ---------------- CHECK ROOT ----------------
if [ "$EUID" -ne 0 ]; then
  ERR "Please run as root (sudo ./configure)"
  exit 1
fi

# --- Mutual exclusivity for flags ---
if [ "$FORCE" = true ] && [ "$UPDATE" = true ]; then
    ERR "--force and --update cannot be used together."
    exit 1
fi

# ---------------- Handle Flags ----------------
if [ "$FORCE" = true ]; then
    WARN "--force flag detected..."
    INFO "Removing $INSTALL_DIR..."
    rm -rf "$INSTALL_DIR"
    OK "Removed $INSTALL_DIR" >/dev/null 2>&1 || true
    INFO "Cloning..."
    git clone "$REPO_URL" "$INSTALL_DIR" >/dev/null 2>&1 || {
        ERR "Failed to clone repository. Check your network connection."
        exit 1
    }
    OK "Cloned Repo to $INSTALL_DIR" 
fi

if [ "$UPDATE" = true ]; then
    WARN "--update flag detected..."
    if [ -d "$INSTALL_DIR/.git" ]; then
        cd "$INSTALL_DIR" || exit 1
        git reset --hard >/dev/null 2>&1
        git pull --rebase --autostash >/dev/null 2>&1
        OK "Updated Repo at $INSTALL_DIR" 
    else
        ERR "No existing repo found at $INSTALL_DIR, use --force to fresh install."
        exit 1
    fi
fi

if [ "$FORCE" = false ] && [ "$UPDATE" = false ]; then
    WARN "No flags detected, proceeding with default behavior..."
    if [ -d "$INSTALL_DIR" ]; then
        ERR "Installation directory $INSTALL_DIR already exists. Use --force to overwrite or --update to update."
        exit 1
    fi
    INFO "Cloning Repo to $INSTALL_DIR" 
    git clone "$REPO_URL" "$INSTALL_DIR" >/dev/null 2>&1 || {
        ERR "Failed to clone repository. Check your network connection."
        exit 1
    }
fi

# ---------------- Permissions ----------------
INFO "Setting executable permissions for scripts..."
find "$INSTALL_DIR" -type f -exec chmod +x {} \; || {
    ERR "Failed to set permissions. Check your permissions."
    exit 1
}

# ---------------- Locate Installer ----------------
INFO "Searching for installer script..."
INSTALLER_PATH=$(find "$INSTALL_DIR" -type f -name "installer" | head -n 1 || true)
INFO "Installer script found at: $INSTALLER_PATH"

if [ -z "$INSTALLER_PATH" ]; then
    ERR "Installer script not found in repository."
    exit 1
fi

# ---------------- Run Installer ----------------
if [ -x "$INSTALLER_PATH" ]; then
    INFO "Running installer script..."
    "$INSTALLER_PATH" || {
        ERR "Installer script failed. Check the logs above."
        exit 1
    }
else
    ERR "Installer script is not executable."
    exit 1
fi

# ---------------- Summary ----------------
END_EPOCH=$(date +%s)
DURATION=$(( END_EPOCH - START_EPOCH ))
TIMETOOK=$(printf "%02d:%02d:%02d" $((DURATION/3600)) $(((DURATION%3600)/60)) $((DURATION%60)) )

echo -e "${GREEN}[+] Time took for installation: $TIMETOOK${RESET}"
OK "Scout installation completed successfully!"
echo -e "Type ${BOLD}${CYAN}scout${RESET} to get started."
echo -e "For help, type ${BOLD}${CYAN}scout --help${RESET} or visit the GitHub repository: ${BOLD}${CYAN}${REPO_URL}${RESET}"
OK "Happy Recon! ðŸ”Ž"