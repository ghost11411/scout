#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

# ---------------- VARIABLES ----------------
VER="v0.1"
REPO_URL="https://github.com/ghost11411/scout"
INSTALL_DIR="${HOME}/scout"
FORCE=false
UPDATE=false
UNINSTALL=false
TYPE="default"
LOG_FILE="/tmp/scout_temp_configure.log"
: > "$LOG_FILE"

TOOLS_DIR="${INSTALL_DIR}/tools"
BIN_DIR="${TOOLS_DIR}/bin"
WORDLISTS_DIR="${TOOLS_DIR}/wordlists"
GF_DIR="$WORDLISTS_DIR/GF-Patterns"

APT_PACKAGES=(
    coreutils git whois jq unzip python3 python3-pip python3-requests python3-dnspython parallel gcc curl wget zip cewl python3-shodan make ca-certificates libpcap-dev golang-go
)

GO_TOOLS=(
    "mapcidr|github.com/projectdiscovery/mapcidr/cmd/mapcidr@latest"
    "amass|github.com/owasp-amass/amass/v4/...@master"
    "assetfinder|github.com/tomnomnom/assetfinder@latest"
    "subfinder|github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest"
    "waybackurls|github.com/tomnomnom/waybackurls@latest"
    "gau|github.com/lc/gau/v2/cmd/gau@latest"
    "dnsx|github.com/projectdiscovery/dnsx/cmd/dnsx@latest"
    "gf|github.com/tomnomnom/gf@latest"
    "unfurl|github.com/tomnomnom/unfurl@latest"
    "httprobe|github.com/tomnomnom/httprobe@latest"
    "httpx|github.com/projectdiscovery/httpx/cmd/httpx@latest"
    "ffuf|github.com/ffuf/ffuf/v2@latest"
    "nuclei|github.com/projectdiscovery/nuclei/v3/cmd/nuclei@latest"
    "naabu|github.com/projectdiscovery/naabu/v2/cmd/naabu@latest"
    "notify|github.com/projectdiscovery/notify/cmd/notify@latest"
)

# ---------------- COLORS ----------------
BLUE="\e[94m"; GREEN="\e[92m"; YELLOW="\e[93m"; RED="\e[91m"; RESET="\e[0m"; BOLD="\e[1m"; CYAN="\033[0;36m"; HIGH_GREEN="\e[38;5;82m"

# ---------------- LOGGING ----------------
OK()      { printf "${GREEN}✅ %s${RESET}\n" "$1"; }
INFO()    { printf "${BLUE}[*] %s${RESET}\n" "$1"; }
WARN()    { printf "${YELLOW}[!] %s${RESET}\n" "$1"; }
ERR()     { printf "${RED}[✘] %s${RESET}\n" "$1" >> "$LOG_FILE"; }

RUN_CMD() {
    local DESC="$1"; shift
    if "$@" >>"$LOG_FILE" 2>&1; then
        OK "$DESC"
    else
        ERR "$DESC failed. Check $LOG_FILE"
    fi
}

# ---------------- SPINNER ----------------
spinner() {
    local pid=$1
    local message=$2
    local delay=0.1
    local i=0
    local BRAILLE_STYLE_SPINNER_CHARS=("⠋" "⠙" "⠹" "⠸" "⠼" "⠴" "⠦" "⠧" "⠇" "⠏")

    tput civis  # hide cursor
    printf "${BLUE}⚙️  %s " "$message"
    while kill -0 "$pid" 2>/dev/null; do
        printf "\r${BLUE}${BRAILLE_STYLE_SPINNER_CHARS[$i]}${RESET} %s" "$message"
        i=$(( (i+1) % ${#BRAILLE_STYLE_SPINNER_CHARS[@]} ))
        sleep $delay
    done
    wait "$pid" 2>/dev/null
    local status=$?

    # Ensure spinner line is fully cleared before returning
    printf "\r\033[K"
    tput cnorm  # restore cursor
    return $status
}


# ---------------- CTRL+C HANDLER ----------------
trap 'tput cnorm; echo -e "\n${RED}[✘] Installation interrupted by user.${RESET}"; exit 1' INT

# ---------------- START TIMER ----------------
START_TIME=$(date +%s)

# ---------------- ASCII BANNER ----------------
BANNER(){
  ASCII_SCOUT=$(cat <<'EOF'
    /$$$$$$   /$$$$$$   /$$$$$$  /$$   /$$ /$$$$$$$$
   /$$__  $$ /$$__  $$ /$$__  $$| $$  | $$|__  $$__/
  | $$  \__/| $$  \__/| $$  \ $$| $$  | $$   | $$   
  |  $$$$$$ | $$      | $$  | $$| $$  | $$   | $$   
   \____  $$| $$      | $$  | $$| $$  | $$   | $$   
   /$$  \ $$| $$    $$| $$  | $$| $$  | $$   | $$   
  |  $$$$$$/|  $$$$$$/|  $$$$$$/|  $$$$$$/   | $$   
   \______/  \______/  \______/  \______/    |__/   
EOF
  )
  TAGLINE="Recon Made Easy                  Made By Ghost ${VER}"
  echo -e "${BOLD}${GREEN}=====================================================${RESET}"
  echo -e "${HIGH_GREEN}${BOLD}${ASCII_SCOUT}${RESET}"
  echo -e "${CYAN}${BOLD}${TAGLINE}${RESET}"
  echo -e "${BOLD}${GREEN}=====================================================${RESET}"
}

# ---------------- PARSE FLAGS ----------------
for ARG in "$@"; do
    case "$ARG" in
        --force) FORCE=true ;;
        --update) UPDATE=true ;;
        --uninstall) UNINSTALL=true ;;
        --help|-h)
            cat <<EOF
Usage: configure [--force] [--update] [--uninstall]
Actions:
    --force     Remove existing installation and fresh install
    --update    Update existing git installation
    --uninstall Remove installation and symlink
EOF
            exit 0 ;;
        *)
            ERR "Unknown option: $ARG"
            echo "Usage: configure [--force|--update|--uninstall]"
            exit 1 ;;
    esac
done

# ---------------- FLAG VALIDATION ----------------
FLAG_COUNT=0
$FORCE && FLAG_COUNT=$((FLAG_COUNT+1))
$UPDATE && FLAG_COUNT=$((FLAG_COUNT+1))
$UNINSTALL && FLAG_COUNT=$((FLAG_COUNT+1))
if [ "$FLAG_COUNT" -gt 1 ]; then
    WARN "Multiple flags used. Only one should be used."
    exit 1
fi

# ---------------- START ----------------
BANNER

# ---------------- CHECK ROOT ----------------
if [ "$EUID" -ne 0 ]; then
    ERR "Please run as root (sudo ./configure)"
    exit 1
fi

# ---------------- MODE SUMMARY ----------------
echo -e "${BOLD}${CYAN}MODE SUMMARY:"
echo "────────────────────────────"
echo "FORCE: $FORCE"
echo "UPDATE: $UPDATE"
echo "UNINSTALL: $UNINSTALL"
echo "Running as user: $(whoami)"
echo -e "────────────────────────────${RESET}"

# ---------------- NO FLAGS DEFAULT INSTALL ----------------
if [ "$FORCE" = false ] && [ "$UPDATE" = false ] && [ "$UNINSTALL" = false ]; then
    if [ -d "$INSTALL_DIR" ]; then
        echo -e "${YELLOW}Installation directory already exists:${RESET} ${BLUE}${INSTALL_DIR}${RESET}"
        echo -e "${BLUE}Choose an option:"
        echo "  1) Update existing installation"
        echo "  2) Force reinstall (remove & fresh install)"
        echo -e "  3) Exit${RESET}"
        read -rp "Enter choice [1-3]: " CHOICE
        case "$CHOICE" in
            1) UPDATE=true ;;
            2) FORCE=true ;;
            3) INFO "Exiting..."; exit 0 ;;
            *) WARN "Invalid choice. Exiting."; exit 1 ;;
        esac
    else
        INFO "Performing default install..."
        FORCE=true
    fi
fi

# ---------------- UNINSTALL ----------------
if [ "$UNINSTALL" = true ]; then
    INFO "Running Uninstaller..."
    [ -d "$INSTALL_DIR" ] && RUN_CMD "Remove install dir" rm -rf -- "$INSTALL_DIR"
    [ -L /usr/local/bin/scout ] && RUN_CMD "Remove symlink" rm -f -- /usr/local/bin/scout
    OK "Scout uninstalled."
    exit 0
fi

# ---------------- FORCE / UPDATE ----------------
if [ "$FORCE" = true ]; then
    WARN "--force flag detected"
    RUN_CMD "Remove existing install" rm -rf -- "$INSTALL_DIR"
    (git clone "$REPO_URL" "$INSTALL_DIR" >>"$LOG_FILE" 2>&1) & spinner $! "Cloning repository"
    OK "Repository cloned to $INSTALL_DIR"
elif [ "$UPDATE" = true ]; then
    WARN "--update flag detected"
    [ -d "$INSTALL_DIR/.git" ] && cd "$INSTALL_DIR" && \
    (git reset --hard >>"$LOG_FILE" 2>&1 && git pull --rebase --autostash >>"$LOG_FILE" 2>&1) & spinner $! "Updating repository"
    OK "Repository updated at $INSTALL_DIR"
fi

# ---------------- PREPARE DIRECTORIES ----------------
mkdir -p "$TOOLS_DIR" "$BIN_DIR" "$WORDLISTS_DIR"
find "$INSTALL_DIR" -type f -exec chmod +x {} \; || true

# ---------------- INSTALL APT PACKAGES ----------------
(apt-get update -y -qq >>"$LOG_FILE" 2>&1) & spinner $! "Updating APT repositories..."
OK "APT repositories updated"

(apt-get install -y -qq --no-install-recommends "${APT_PACKAGES[@]}" >>"$LOG_FILE" 2>&1) & spinner $! "Installing APT packages..."
OK "APT packages installed"

# ---------------- INSTALL GO TOOLS ----------------
if command -v go >/dev/null 2>&1; then
    INFO "Go version: $(go version)"
    mkdir -p "$BIN_DIR"
    export GOBIN="$BIN_DIR"
    export PATH="$GOBIN:$PATH"
    for PAIR in "${GO_TOOLS[@]}"; do
        NAME="${PAIR%%|*}"
        PKG="${PAIR#*|}"
        (go install "$PKG" >>"$LOG_FILE" 2>&1) & spinner $! "Installing Go tool: $NAME"
        OK "Installed $NAME"
    done
fi
INFO "Go tools installed"

# ---------------- CLONE REPOS ----------------
(git clone --depth 1 https://github.com/1ndianl33t/GF-Patterns.git "$GF_DIR" >>"$LOG_FILE" 2>&1) & spinner $! "Cloning GF-Patterns..."
OK "GF-Patterns cloned"

(git clone --depth 1 https://github.com/aboul3la/Sublist3r.git "$BIN_DIR/Sublist3r" >>"$LOG_FILE" 2>&1) & spinner $! "Cloning Sublist3r..."
OK "Sublist3r cloned"

# ---------------- SYMLINK ----------------
chmod 755 "$BIN_DIR"/* 2>/dev/null || true
[ -f "$INSTALL_DIR/scout" ] && chmod +x "$INSTALL_DIR/scout" || true
ln -sf "$INSTALL_DIR/scout" /usr/local/bin/scout
OK "Symlink created"

# ---------------- SHOW TOTAL TIME ----------------
END_TIME=$(date +%s)
ELAPSED=$((END_TIME - START_TIME))
INFO "Script completed in $(printf '%02d:%02d:%02d' $((ELAPSED/3600)) $(((ELAPSED/60)%60)) $((ELAPSED%60)))"

# ---------------- SUMMARY ----------------
OK "Scout installation completed successfully!"
echo -e "Type ${BOLD}${CYAN}scout${RESET} to get started."
echo -e "For help, type ${BOLD}${CYAN}scout --help${RESET} or visit the GitHub repository: ${BOLD}${CYAN}${REPO_URL}${RESET}"
echo -e  "${CYAN}${BOLD}Happy Recon!${RESET} 🔎"
exit 0
