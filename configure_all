#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

# ---------------- PATH & ESSENTIALS ----------------
export PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:$PATH"

# ---------------- VARIABLES ----------------
REPO_URL="https://github.com/ghost11411/scout"
INSTALL_DIR="${HOME}/scout"
TOOLS_DIR="${INSTALL_DIR}/tools"
BIN_DIR="${TOOLS_DIR}/bin"
WORDLISTS_DIR="${TOOLS_DIR}/wordlists"
GF_DIR="${WORDLISTS_DIR}/GF-Patterns"
LOG_FILE="/tmp/scout_install.log" 
touch "$LOG_FILE"
: > "$LOG_FILE"

FORCE=false
UPDATE=false
VER=v0.1
START_TIME=$(date +%s)

# ---------------- COLORS ----------------
BLUE="\e[94m"; GREEN="\e[92m"; YELLOW="\e[93m"; RED="\e[91m"; RESET="\e[0m"; BOLD="\e[1m"; CYAN="\033[0;36m"; HIGH_GREEN="\e[38;5;82m";

OK()      { printf "${GREEN}[✔] %s${RESET}\n" "$1"; }
INFO()    { printf "${BLUE}[*] %s${RESET}\n" "$1"; }
WARN()    { printf "${YELLOW}[!] %s${RESET}\n" "$1"; }
ERR()     { printf "${RED}[✘] %s${RESET}\n" "$1"; echo "$(date --iso-8601=seconds) - $1" >> "$LOG_FILE"; }

# ---------------- ASCII BANNER ----------------
BANNER(){
ASCII_SCOUT=$(cat <<'EOF'
    /$$$$$$   /$$$$$$   /$$$$$$  /$$   /$$ /$$$$$$$$
   /$$__  $$ /$$__  $$ /$$__  $$| $$  | $$|__  $$__/
  | $$  \__/| $$  \__/| $$  \ $$| $$  | $$   | $$   
  |  $$$$$$ | $$      | $$  | $$| $$  | $$   | $$   
   \____  $$| $$      | $$  | $$| $$  | $$   | $$   
   /$$  \ $$| $$    $$| $$  | $$| $$  | $$   | $$   
  |  $$$$$$/|  $$$$$$/|  $$$$$$/|  $$$$$$/   | $$   
   \______/  \______/  \______/  \______/    |__/   
EOF
)
TAGLINE="Recon Made Easy                  Made By Ghost ${VER}"

echo -e "${BOLD}${GREEN}=====================================================${RESET}"
while IFS= read -r LINE; do
    for ((i=0;i<${#LINE};i++)); do
        printf "${HIGH_GREEN}${BOLD}%c${RESET}" "${LINE:i:1}"
        sleep 0.0008
    done
    printf "\n"
done <<< "$ASCII_SCOUT"
for ((i=0;i<${#TAGLINE};i++)); do
    printf "${CYAN}${BOLD}%c${RESET}" "${TAGLINE:i:1}"
    sleep 0.002
done
printf "\n\n"
echo -e "${BOLD}${GREEN}=====================================================${RESET}"
}

# ---------------- ARG PARSING ----------------
for arg in "$@"; do
    case "$arg" in
        --force) FORCE=true ;;
        --update) UPDATE=true ;;
        *) ERR "Unknown option: $arg"; echo "Usage: configure [--force | --update]"; exit 1 ;;
    esac
done

BANNER
INFO "Starting Scout full installation..."

# ---------------- ROOT CHECK ----------------
[ "$EUID" -ne 0 ] && { ERR "Run as root"; exit 1; }

REQUIRED_CMDS=(sleep chmod ln rm git curl wget unzip tar bash make gcc go)
MISSING_CMDS=()
for CMD in "${REQUIRED_CMDS[@]}"; do
    command -v "$CMD" >/dev/null 2>&1 || MISSING_CMDS+=("$CMD")
done

if [ ${#MISSING_CMDS[@]} -ne 0 ]; then
    echo "[*] Installing..."
    if command -v apt >/dev/null 2>&1; then
        sudo apt update -y >/dev/null 2>&1
        sudo apt install -y coreutils util-linux findutils bash git curl wget unzip tar >/dev/null 2>&1
    elif command -v apk >/dev/null 2>&1; then
        sudo apk add --no-cache coreutils util-linux findutils bash git curl wget unzip tar >/dev/null 2>&1
    elif command -v yum >/dev/null 2>&1; then
        sudo yum install -y coreutils util-linux findutils git curl wget unzip tar >/dev/null 2>&1
    else
        echo "[✘] Unsupported package manager. Install manually: ${MISSING_CMDS[*]}"
        exit 1
    fi
fi

# ---------------- FLAG HANDLING ----------------
if [ "$FORCE" = true ] && [ "$UPDATE" = true ]; then ERR "--force and --update cannot be used together"; exit 1; fi
if [ "$FORCE" = true ]; then 
    rm -rf "$INSTALL_DIR"
    git clone "$REPO_URL" "$INSTALL_DIR" >/dev/null 2>&1
    OK "Cloned repo to $INSTALL_DIR"
elif [ "$UPDATE" = true ]; then 
    cd "$INSTALL_DIR" && git reset --hard >/dev/null 2>&1 && git pull --rebase --autostash >/dev/null 2>&1
    OK "Updated repo"
else 
    [ -d "$INSTALL_DIR" ] && { ERR "$INSTALL_DIR exists. Use --force or --update."; exit 1; }
    git clone "$REPO_URL" "$INSTALL_DIR" >/dev/null 2>&1
    OK "Cloned repo to $INSTALL_DIR"
fi

# ---------------- SPINNER FUNCTION ----------------
BRAILLE_SPINNER=("⠋" "⠙" "⠹" "⠸" "⠼" "⠴" "⠦" "⠧" "⠇" "⠏")
spinner_task() {
    local NAME="$1"
    local PID="$2"
    local START=$(date +%s)
    local I=0
    # If PID is empty or 0 just return
    [ -z "$PID" ] && return
    while kill -0 "$PID" 2>/dev/null; do
        local NOW=$(date +%s)
        local ELAPSED=$((NOW - START))
        printf "\r${YELLOW}[%s] %s (%02d:%02d)${RESET}" "${BRAILLE_SPINNER[I % ${#BRAILLE_SPINNER[@]}]}" "$NAME" $((ELAPSED/60)) $((ELAPSED%60))
        I=$((I+1))
        sleep 0.1
    done
    printf "\r\033[K"
}

run_task() {
    local NAME="$1"; shift
    # Start command in background; stdout -> /dev/null, stderr -> log
    "$@" >/dev/null 2>>"$LOG_FILE" &
    local PID=$!
    spinner_task "$NAME" "$PID"
    # wait inside an if to avoid set -e killing the script on non-zero exit
    if ! wait "$PID"; then
        local EXIT_CODE=$?
        ERR "$NAME failed (exit code $EXIT_CODE). See $LOG_FILE for details."
        # Do not exit whole script — return non-zero so callers can choose if they want to fail
        return 0
    fi
    OK "$NAME completed"
    return 0
}

# ---------------- INSTALL FUNCTIONS (serial) ----------------
INSTALL_APT_PACKAGES() { run_task "APT packages" bash -c 'sudo apt update -y && sudo apt install -y coreutils git whois jq unzip python3 python3-pip python3-requests python3-dnspython pipx parallel gcc make curl wget zip cewl make ca-certificates libpcap-dev golang-go'; }

INSTALL_PIPX_TOOLS() {
    run_task "pipx" bash -c 'command -v pipx || python3 -m pip install --user pipx; python3 -m pipx ensurepath; export PATH="$HOME/.local/bin:$PATH"; pipx install --force arjun'
}

INSTALL_GO_TOOLS_SERIAL() {
    export GOBIN="$BIN_DIR"
    export PATH="$GOBIN:$PATH"
    TOOLS=(
            "mapcidr|github.com/projectdiscovery/mapcidr/cmd/mapcidr@latest"
            "amass|github.com/owasp-amass/amass/v4/...@master"
            "assetfinder|github.com/tomnomnom/assetfinder@latest"
            "subfinder|github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest"
            "waybackurls|github.com/tomnomnom/waybackurls@latest"
            "gau|github.com/lc/gau/v2/cmd/gau@latest"
            "dnsx|github.com/projectdiscovery/dnsx/cmd/dnsx@latest"
            "gf|github.com/tomnomnom/gf@latest"
            "unfurl|github.com/tomnomnom/unfurl@latest"
            "httprobe|github.com/tomnomnom/httprobe@latest"
            "httpx|github.com/projectdiscovery/httpx/cmd/httpx@latest"
            "ffuf|github.com/ffuf/ffuf/v2@latest"
            "nuclei|github.com/projectdiscovery/nuclei/v3/cmd/nuclei@latest"
            "naabu|github.com/projectdiscovery/naabu/v2/cmd/naabu@latest"
            "notify|github.com/projectdiscovery/notify/cmd/notify@latest"
    )
    INFO "Installing Go tools (this may take a while)..."
    for PAIR in "${TOOLS[@]}"; do
        NAME="${PAIR%%|*}"
        PKG="${PAIR#*|}"
        run_task "$NAME" go install "$PKG"
    done
}

INSTALL_MASSCAN() {
    run_task "masscan" bash -c "DIR=\$(mktemp -d); git clone --depth 1 https://github.com/robertdavidgraham/masscan.git \$DIR; cd \$DIR; make -j\$(nproc); mv masscan $BIN_DIR/; chmod +x $BIN_DIR/masscan"
}

INSTALL_NMAP() {
    run_task "nmap" bash -c "curl -fsSL https://github.com/andrew-d/static-binaries/raw/master/binaries/linux/x86_64/nmap -o $BIN_DIR/nmap; chmod +x $BIN_DIR/nmap"
}

INSTALL_FINDOMAIN() {
    run_task "findomain" bash -c "VER=\$(curl -fsSL https://github.com/Findomain/Findomain/releases/latest | grep -Eo 'tag/[0-9A-Za-z._-]+' | head -n1 | cut -d'/' -f2); TMP=\$(mktemp -d); curl -fsSL -L https://github.com/Findomain/Findomain/releases/download/\$VER/findomain-linux.zip -o \$TMP/findomain.zip; unzip -o \$TMP/findomain.zip -d \$TMP; mv \$TMP/findomain $BIN_DIR/findomain; chmod +x $BIN_DIR/findomain"
}

CLONE_REPOS() {
    REPOS=(
        "1ndianl33t/GF-Patterns|$GF_DIR|https://github.com/1ndianl33t/GF-Patterns.git"
        "aboul3la/Sublist3r|$TOOLS_DIR/Sublist3r|https://github.com/aboul3la/Sublist3r.git"
    )
    for ENTRY in "${REPOS[@]}"; do
        IFS='|' read -r NAME PATH GITURL <<< "$ENTRY"
        if [ -d "$PATH/.git" ]; then
            git -C "$PATH" pull --ff-only >/dev/null 2>&1
        else
            git clone --depth 1 "$GITURL" "$PATH" >/dev/null 2>&1
        fi
        OK "$NAME ready"
    done
}

# ---------------- MAIN SERIAL INSTALL ----------------

mkdir -p "$BIN_DIR" "$GF_DIR" "$WORDLISTS_DIR"
INSTALL_APT_PACKAGES
INSTALL_PIPX_TOOLS
INSTALL_GO_TOOLS_SERIAL
INSTALL_MASSCAN
INSTALL_NMAP
INSTALL_FINDOMAIN
CLONE_REPOS

chmod +x "$BIN_DIR"/* 2>/dev/null
[ -f "$INSTALL_DIR/scout" ] && chmod +x "$INSTALL_DIR/scout"
[ -w /usr/local/bin ] && ln -sf "$INSTALL_DIR/scout" /usr/local/bin/scout && OK "Symlink created" || WARN "Could not symlink scout"

END_TIME=$(date +%s)
DURATION=$(( END_TIME - START_TIME ))
printf "${GREEN}[+] Total time: %02d:%02d:%02d${RESET}\n" $((DURATION/3600)) $(((DURATION%3600)/60)) $((DURATION%60))

OK "Scout installation completed successfully!"
echo -e "Type ${BOLD}${CYAN}scout${RESET} to get started."
echo -e "For help, type ${BOLD}${CYAN}scout --help${RESET} or visit the GitHub repository: ${BOLD}${CYAN}${REPO_URL}${RESET}"
OK "Happy Recon! 🔎"
exit 0